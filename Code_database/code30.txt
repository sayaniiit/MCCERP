/* Insertion sort on linked list  **/ 
#include <stdio.h>
#include <stdlib.h>
struct Item{
   int value;
   struct Item* next;
};
struct Item* new_item(int val)
{
    struct Item* p= (struct Item*)malloc(sizeof(struct Item));
    p -> value = val;
    p -> next = NULL;  
  return p;
}
/** print list* @param first Item of list*/
void print(struct Item* begin)
{
   struct Item * help = begin;
   while(help != NULL)
   {
      printf("%d ",help->value);
      help = help->next;
   }
}
/** Add new Item at the beginning of list*/
struct Item* push_front(struct Item* begin, int new_value)
{
   struct Item* p = new_item(new_value);
   p -> next = begin;
   return p; 
}
/**   Add new Item at the end of list*/
void push_back(struct Item* begin, int new_value)
{
    struct Item* p = begin;
    struct Item* new_end = new_item(new_value);
    while(p->next != NULL)
	{
        p = p -> next;
    }
    p -> next = new_end;
}
/** * Add item to list ahead of defined position
 * * @param begin - start of list
 * @param position - position before which we want to add item
 * @param new_Item - item we want to add
 * @return begin of list (if we dont insert at the beginning it equals begin)
*/
struct Item* insert(struct Item* begin, struct Item* position, struct Item* new_Item)
{
   //check if we add to the beginning
   if(begin == position) 
   {
       new_Item -> next = begin;
       return new_Item;
   }   
   struct Item* p = begin;
   while(p -> next != position) 
   {
       p = p -> next;
   }   
   new_Item -> next = p -> next;
   p -> next = new_Item;   
   return begin; 
}

/** * Generate random number in range <down,up> */
int rand_number(int down, int up) 
{
    return (rand()%(up-down))+down;
}
/** * Generate random list of length count and values in range <down_bound, up_bound- */
struct Item* generate_random(int count, int down_bound, int up_bound)
 {
    int i;
    struct Item* start = new_item(rand_number(down_bound,up_bound));
    for(i=1;i<count;i++) 
	{
        start = push_front(start, rand_number(down_bound,up_bound));
    }
    return start;
}
struct Item* insertion_sort(struct Item* begin)
{
   struct Item* sorted = begin;
   struct Item* pre = begin; 
   struct Item* p;
   struct Item* p1;   
   while(pre -> next != NULL) 
   {       
       p = sorted;
	   while( pre ->next  != NULL && p != pre -> next && p -> value < pre->next->value)
        p = p -> next;       
       if(pre -> next != p)
	    { 
          //connect element before with element after
           p1 = pre -> next;
           pre -> next = pre -> next -> next;
           sorted = insert(sorted,p, p1);            
       }
	   else
	   {        
        pre = pre -> next;
       }
   }
   return sorted;
}
int main( )
{
  struct Item* nam1 = generate_random(30,15,60);
  struct Item* nam2;
  print(nam1);
  printf("\n");
  nam2= insertion_sort(nam1);
  print(nam2);
}